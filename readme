# Note: Adding memory form took 2 minutes until please wait
      * Memory Id is created when memory form is added , open the memory form below memory id is created
      
# üì∏ MemoryLane

MemoryLane is a web application that helps users preserve and relive precious memories. 
Users can securely register, log in, and create multimedia-rich memory entries‚Äîincluding photos, videos, text, and locations‚Äîorganized in a beautiful, interactive interface.

## üöÄ Features

- **User Authentication:** Secure registration and login system using Firebase Authentication.
- **Create & Tag Memories:** Add memory albums with photos, notes, and videos. Tag memories for easy organization and retrieval.
- **Reminisce:** View a random saved memory (with image/video and details) after authentication.
- **Timeline & Albums:** Browse memories in a timeline or by tagged albums.
- **Cloud Storage:** All files and data are securely stored using Firebase Realtime Database and Storage.
- **Responsive Design:** Works beautifully on desktop and mobile devices.

## üõ†Ô∏è Tech Stack

- **Frontend:** HTML, CSS (with gradients and modern UI), JavaScript (ES6+)
- **Backend/Database:** Firebase Realtime Database & Firebase Storage
- **Authentication:** Firebase Authentication
- **Libraries/Tools:** Firebase SDK, Responsive Web Design

## üìÅ Project Structure

memorylane/
‚îÇ
‚îú‚îÄ‚îÄ index.html            # Landing / Registration Page
‚îú‚îÄ‚îÄ login.html            # Login Page
‚îú‚îÄ‚îÄ dashboard.html        # Main Dashboard
‚îú‚îÄ‚îÄ reminisce.html        # Random memory feature
‚îú‚îÄ‚îÄ timeline.html         # Memory timeline view
‚îú‚îÄ‚îÄ calender.html         # Calendar view for memories
‚îú‚îÄ‚îÄ register.html         # Registration page
‚îú‚îÄ‚îÄ tagging.html          # Tagging interface
‚îÇ
‚îú‚îÄ‚îÄ css/                  # All CSS files
‚îÇ   ‚îú‚îÄ‚îÄ index.css
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.css
‚îÇ   ‚îú‚îÄ‚îÄ login.css
‚îÇ   ‚îú‚îÄ‚îÄ memory-entry.css
‚îÇ   ‚îú‚îÄ‚îÄ memory-timeline.css
‚îÇ   ‚îú‚îÄ‚îÄ reminisce.css
‚îÇ   ‚îú‚îÄ‚îÄ milestone.css
‚îÇ   ‚îú‚îÄ‚îÄ tagging.css
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îú‚îÄ‚îÄ js/                   # All JavaScript files
‚îÇ   ‚îú‚îÄ‚îÄ auth.js
‚îÇ   ‚îú‚îÄ‚îÄ dashboard.js
‚îÇ   ‚îú‚îÄ‚îÄ firebase.js
‚îÇ   ‚îú‚îÄ‚îÄ google-auth.js
‚îÇ   ‚îú‚îÄ‚îÄ reminisce.js
‚îÇ   ‚îú‚îÄ‚îÄ tagging.js
‚îÇ   ‚îú‚îÄ‚îÄ timeline.js
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îú‚îÄ‚îÄ images/               # Media assets
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îú‚îÄ‚îÄ users.json            # Example user data (for development)
‚îú‚îÄ‚îÄ firebase.json         # Firebase configuration
‚îú‚îÄ‚îÄ cors.json             # CORS configuration
‚îú‚îÄ‚îÄ readme                # Project documentation (this file)
‚îî‚îÄ‚îÄ 404.html              # Custom 404 page


## üîí Firebase Setup & Security

1. **Create a Firebase Project:**  
   Go to [Firebase Console](https://firebase.google.com/) and create a new project.

2. **Enable Authentication:**  
   - Go to Authentication > Sign-in method > Enable Email/Password.

3. **Set Up Realtime Database Rules:**  
   Example rules to restrict access to authenticated users:
   ```json
{
  "rules": {
    "users": {
      "$uid": {
        ".read": "$uid === auth.uid",
        ".write": "$uid === auth.uid",
        "memories": {
          "$memoryId": {
            ".read": "$uid === auth.uid",
            ".write": "$uid === auth.uid"
          }
        },
        "tags": {
          "$tagId": {
            ".read": "$uid === auth.uid",
            ".write": "$uid === auth.uid"
          }
        }
      }
    },
    "usersEmails": {
      ".read": "auth != null",
      ".write": "auth != null"
    }
  }
}

4. **Set Up Firebase Storage Rules:**  
   ```js
  rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /memories/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
       match /tags/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}


5.**Firestore Database Rules:**
```js
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ Allow access to memories directly via memoryId, for authenticated users
    match /memories/{memoryId} {
      allow read, write: if request.auth != null;
    }

    // Optional: if you still have tags as separate documents (not needed if in memory doc)
    match /tags/{tagId} {
      allow read, write: if request.auth != null;
    }
        match /albums/{albumId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}

5. **Add Your Firebase Config:**  
   - Copy your Firebase config object into `js/firebase.js`.

6. **Run the App:**  
   - Open `index.html` in your browser.

## üåê Live Demo
[Deployed Project Link]https://mellow-gumption-5936da.netlify.app/

## ü§ù Contributing
Pull requests are welcome! For major changes, please open an issue first to discuss what you would like to change.

## üìÑ License
This project is for educational purposes.
Would you like me to save this as your new `readme` file, or would you prefer a different filename (like `README.md`)?


